@page "/pokemons/evolve"
@using Microsoft.EntityFrameworkCore
@using Pok
@inject IDbContextFactory<webc.Data.webcContext> DbFactory
@inject NavigationManager NavigationManager
<PageTitle>Evolve</PageTitle>

<h1>Evolve</h1>

<h2>Pokemon</h2>
<hr />
@if (Pokemon is null)
{
                <p><em>Loading...</em></p>
}
else if (Regions is null)
{
                <p><em>Loading regions...</em></p>
}
else
{
                <div class="row">
                    <div class="col-md-4">
                        <EditForm Model="Pokemon" OnValidSubmit="EvolvePokemon" FormName="evolve" Enhance>
                            <DataAnnotationsValidator />
                            <ValidationSummary role="alert" />

                            <div class="mb-3">
                                <label for="pokemon_name" class="form-label">✨ Pokemon Name:</label>
                                <input id="pokemon_name" value="@Pokemon.Pokemon_name" class="form-control" readonly />
                            </div>

                            <!-- Region Display -->
                            <div class="mb-3">
                                <label for="regionid" class="form-label">🌍 Region:</label>
                                <input id="regionid" value="@Regions.FirstOrDefault(r => r.RegionId == Pokemon.RegionId)?.RegionName" class="form-control" readonly />
                            </div>

                            <div class="mb-3">
                                <label for="health" class="form-label">❤️ Health:</label>
                                <input id="health" value="@Pokemon.Health" class="form-control" readonly />
                            </div>
                            <div class="mb-3">
                                <label for="speed" class="form-label">⚡ Speed:</label>
                                <input id="speed" value="@Pokemon.Speed" class="form-control" readonly />
                            </div>
                            <div class="mb-3">
                                <label for="attack" class="form-label">💥 Attack:</label>
                                <input id="attack" value="@Pokemon.Attack" class="form-control" readonly />
                            </div>
                            <div class="mb-3">
                                <label for="abilities" class="form-label">🔮 Abilities:</label>
                                <input id="abilities" value="@Pokemon.Abilities" class="form-control" readonly />
                            </div>
                            <div class="mb-3">
                                <label for="height_weight" class="form-label">📏 Height/Weight:</label>
                                <input id="height_weight" value="@Pokemon.Height_weight" class="form-control" readonly />
                            </div>
                            <div class="mb-3">
                                <label for="level" class="form-label">⭐ Level (Evolution can occur over level 15):</label>
                                <input id="level" value="@Pokemon.Level" class="form-control" readonly />
                            </div>

                            <button type="submit" class="btn btn-primary" disabled="@(EvolvedPokemons.ContainsKey(Pokemon.PokemonId) && EvolvedPokemons[Pokemon.PokemonId])">Evolve Pokémon</button>
                @if (EvolvedPokemons.ContainsKey(Pokemon.PokemonId) && EvolvedPokemons[Pokemon.PokemonId])
                {
                            <p class="text-danger">This Pokémon has already evolved.</p>
                }


                        </EditForm>
                    </div>
                </div>
}

<div>
    <a href="/pokemons">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int PokemonId { get; set; }

    [SupplyParameterFromForm]
    private Pokemon? Pokemon { get; set; }

    private List<Region>? Regions { get; set; }

    private static Dictionary<int, bool> EvolvedPokemons = new Dictionary<int, bool>();

    // Map for Pokémon special evolutions
    private static readonly Dictionary<string, string> EvolutionMap = new()
    {
        { "Bulbasaur", "Venusaur" },
            { "Ivysaur", "Venusaur" },
            { "Charmander", "Charizard" },
            { "Charmeleon", "Charizard" },
            { "Squirtle", "Blastoise" },
            { "Wartortle", "Blastoise" },
            { "Caterpie", "Butterfree" },
            { "Metapod", "Butterfree" },
            { "Weedle", "Beedrill" },
            { "Kakuna", "Beedrill" },
            { "Pidgey", "Pidgeot" },
            { "Pidgeotto", "Pidgeot" },
            { "Rattata", "Raticate" },
            { "Ekans", "Arbok" },
            { "Pikachu", "Raichu" },
            { "Pichu", "Raichu" },
            { "Sandshrew", "Sandslash" },
            { "Nidoran♀", "Nidoqueen" },
            { "Nidorina", "Nidoqueen" },
            { "Nidoran♂", "Nidoking" },
            { "Nidorino", "Nidoking" },
            { "Clefairy", "Clefable" },
            { "Cleffa", "Clefable" },
            { "Vulpix", "Ninetales" },
            { "Jigglypuff", "Wigglytuff" },
            { "Zubat", "Crobat" },
            { "Golbat", "Crobat" },
            { "Oddish", "Bellossom" },
            { "Gloom", "Bellossom" },
            { "Paras", "Parasect" },
            { "Venonat", "Venomoth" },
            { "Diglett", "Dugtrio" },
            { "Meowth", "Persian" },
            { "Psyduck", "Golduck" },
            { "Machop", "Machamp" },
            { "Machoke", "Machamp" },
            { "Magnemite", "Magnezone" },
            { "Magneton", "Magnezone" },
            { "Geodude", "Golem" },
            { "Graveler", "Golem" },
            { "Gastly", "Gengar" },
            { "Haunter", "Gengar" },
            { "Onix", "Steelix" },
            { "Drowzee", "Hypno" },
            { "Krabby", "Kingler" },
            { "Voltorb", "Electrode" },
            { "Exeggcute", "Exeggutor" },
            { "Cubone", "Marowak" },
            { "Tyrogue", "Hitmontop" },
            { "Eevee", "Sylveon" },
            { "Dratini", "Dragonite" },
            { "Dragonair", "Dragonite" },
            { "Larvitar", "Tyranitar" },
            { "Pupitar", "Tyranitar" },
            { "Bagon", "Salamence" },
            { "Shelgon", "Salamence" }


    };

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        Pokemon ??= await context.Pokemon.FirstOrDefaultAsync(m => m.PokemonId == PokemonId);

        if (Pokemon is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        Regions = await context.Region.OrderBy(r => r.RegionName).ToListAsync();
    }

    private async Task EvolvePokemon()
    {
        if (Pokemon != null && (!EvolvedPokemons.ContainsKey(Pokemon.PokemonId) || !EvolvedPokemons[Pokemon.PokemonId]) && Pokemon.Level > 15)
        {
            
            if (EvolutionMap.ContainsKey(Pokemon.Pokemon_name) && Pokemon.Level > 15)
            {
                Pokemon.Pokemon_name = EvolutionMap[Pokemon.Pokemon_name];
            }



            Pokemon.Attack *= 2;
            Pokemon.Speed *= 2;
            Pokemon.Health *= 2;


            EvolvedPokemons[Pokemon.PokemonId] = true;

            using var context = DbFactory.CreateDbContext();
            context.Attach(Pokemon).State = EntityState.Modified;

            try
            {
                await context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!PokemonExists(Pokemon.PokemonId))
                {
                    NavigationManager.NavigateTo("notfound");
                }
                else
                {
                    throw;
                }
            }

            NavigationManager.NavigateTo($"/pokemons/evolve?PokemonId={Pokemon.PokemonId}");
        }
    }

    private bool PokemonExists(int pokemonid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Pokemon.Any(e => e.PokemonId == pokemonid);
    }
}


        <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f8f9fa;
            margin: 0;
            padding: 0;
        }

        h1 {
            text-align: center;
            color: #007bff;
            font-size: 2.5rem;
            margin-bottom: 20px;
            text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.1);
        }

        h2 {
            text-align: center;
            color: #495057;
            margin-bottom: 10px;
        }

        hr {
            border: 0;
            border-top: 2px solid #007bff;
            margin-bottom: 30px;
            width: 80%;
            margin-left: auto;
            margin-right: auto;
        }

        .row {
            display: flex;
            justify-content: center;
            padding: 20px;
        }

        .col-md-4 {
            background: #ffffff;
            padding: 20px 30px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .form-label {
            font-weight: bold;
            color: #343a40;
        }

        .form-control {
            border-radius: 8px;
            border: 1px solid #ced4da;
            padding: 10px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 8px rgba(0, 123, 255, 0.25);
        }

        .btn {
            display: inline-block;
            padding: 10px 20px;
            font-size: 1rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.2s;
        }

        .btn-primary {
            background-color: #007bff;
            color: white;
        }

        .btn-primary:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }

        .text-danger {
            color: #dc3545;
            font-size: 0.9rem;
            margin-top: 5px;
        }

        a {
            display: inline-block;
            margin-top: 20px;
            color: #6c757d;
            text-decoration: none;
            font-weight: bold;
            transition: color 0.3s;
        }

        a:hover {
            color: #0056b3;
        }
    </style>