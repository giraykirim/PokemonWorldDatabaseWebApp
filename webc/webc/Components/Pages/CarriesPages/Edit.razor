@page "/Carries/edit"
@using Microsoft.EntityFrameworkCore
@using Pok
@inject IDbContextFactory<webc.Data.webcContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Carries</h2>
<hr />
@if (Carries is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Carries" OnValidSubmit="UpdateCarries" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Carries.Id" value="@Carries.Id" />
                <div class="mb-3">
                    <label for="trainerid" class="form-label">TrainerId:</label>
                    <InputNumber id="trainerid" @bind-Value="Carries.TrainerId" class="form-control" />
                    <ValidationMessage For="() => Carries.TrainerId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="itemid" class="form-label">ItemId:</label>
                    <InputNumber id="itemid" @bind-Value="Carries.ItemId" class="form-control" />
                    <ValidationMessage For="() => Carries.ItemId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/Carries">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Carries? Carries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Carries ??= await context.Carries.FirstOrDefaultAsync(m => m.Id == Id);

        if (Carries is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    
    private async Task UpdateCarries()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Carries!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CarriesExists(Carries!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/Carries");
    }

    private bool CarriesExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Carries.Any(e => e.Id == id);
    }
}
<style>
    h1, h2 {
        text-align: center;
        font-size: 2rem;
        color: #4caf50;
        margin-bottom: 20px;
    }

    .row {
        display: flex;
        justify-content: center;
        margin-top: 30px;
    }

    .col-md-4 {
        background: #f9f9f9;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    }

    .form-label {
        font-weight: bold;
        color: #333;
    }

    .form-control {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        font-size: 1rem;
        width: 100%;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

    .form-control:focus {
        border-color: #4caf50;
        box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
        outline: none;
    }

    .btn-primary {
        background-color: #4caf50;
        border: none;
        color: white;
        font-size: 1rem;
        font-weight: bold;
        padding: 10px 20px;
        border-radius: 5px;
        transition: background-color 0.3s, transform 0.2s;
        cursor: pointer;
    }

    .btn-primary:hover {
        background-color: #45a049;
        transform: translateY(-2px);
        box-shadow: 0 8px 15px rgba(76, 175, 80, 0.3);
    }

    a {
        display: inline-block;
        margin-top: 20px;
        font-size: 1rem;
        color: #3498db;
        text-decoration: none;
    }

    a:hover {
        text-decoration: underline;
    }

    .text-danger {
        font-size: 0.9rem;
        color: #e74c3c;
        margin-top: 5px;
    }

    hr {
        border: none;
        border-top: 2px solid #ddd;
        margin: 20px 0;
    }
</style>