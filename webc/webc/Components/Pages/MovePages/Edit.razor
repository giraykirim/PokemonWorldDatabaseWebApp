@page "/moves/edit"
@using Microsoft.EntityFrameworkCore
@using Pok
@inject IDbContextFactory<webc.Data.webcContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Move</h2>
<hr />
@if (Move is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Move" OnValidSubmit="UpdateMove" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Move.MoveId" value="@Move.MoveId" />
                <div class="mb-3">
                    <label for="move_name" class="form-label">Move_name:</label>
                    <InputText id="move_name" @bind-Value="Move.Move_name" class="form-control" />
                    <ValidationMessage For="() => Move.Move_name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Move.Description" class="form-control" />
                    <ValidationMessage For="() => Move.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="types" class="form-label">Types:</label>
                    <InputText id="types" @bind-Value="Move.Types" class="form-control" />
                    <ValidationMessage For="() => Move.Types" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="overallstat" class="form-label">overallStat:</label>
                    <InputNumber id="overallstat" @bind-Value="Move.overallStat" class="form-control" />
                    <ValidationMessage For="() => Move.overallStat" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/moves">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int MoveId { get; set; }

    [SupplyParameterFromForm]
    private Move? Move { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Move ??= await context.Move.FirstOrDefaultAsync(m => m.MoveId == MoveId);

        if (Move is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    
    private async Task UpdateMove()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Move!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MoveExists(Move!.MoveId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/moves");
    }

    private bool MoveExists(int moveid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Move.Any(e => e.MoveId == moveid);
    }
}

         <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f8f9fa;
            margin: 0;
            padding: 0;
        }

        h1 {
            text-align: center;
            color: #007bff;
            font-size: 2.5rem;
            margin-bottom: 20px;
            text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.1);
        }

        h2 {
            text-align: center;
            color: #495057;
            margin-bottom: 10px;
        }

        hr {
            border: 0;
            border-top: 2px solid #007bff;
            margin-bottom: 30px;
            width: 80%;
            margin-left: auto;
            margin-right: auto;
        }

        .row {
            display: flex;
            justify-content: center;
            padding: 20px;
        }

        .col-md-4 {
            background: #ffffff;
            padding: 20px 30px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .form-label {
            font-weight: bold;
            color: #343a40;
        }

        .form-control {
            border-radius: 8px;
            border: 1px solid #ced4da;
            padding: 10px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 8px rgba(0, 123, 255, 0.25);
        }

        .btn {
            display: inline-block;
            padding: 10px 20px;
            font-size: 1rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.2s;
        }

        .btn-primary {
            background-color: #007bff;
            color: white;
        }

        .btn-primary:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }

        .text-danger {
            color: #dc3545;
            font-size: 0.9rem;
            margin-top: 5px;
        }

        a {
            display: inline-block;
            margin-top: 20px;
            color: #6c757d;
            text-decoration: none;
            font-weight: bold;
            transition: color 0.3s;
        }

        a:hover {
            color: #0056b3;
        }
    </style>